import os

import skops.io as sio
import numpy as np

from cryptsmash.utils import inv_chi_squared, frequency_table, index_of_coincidence, data_dir, has_non_printables
from cryptsmash.plaintext import English

#############################################
# Attempt Decryption with all Keys and Rank #
#############################################
# All ASCII -> Good (But not Bad thing if it isnt)
# Python Magic detects a non-data file -> Good
# Language Score

# def detect_decryption(decrypted_data:bytes, key):
    # known_file, file_type = is_known_file(decrypted_data)
    # if known_file:
    #     return True
# def decrypt_score(decrypted_data:bytes, key):
#     score = 1

#     # known_file, file_type = is_known_file(decrypted_data)
#     # if known_file:
#     #     score *= 
    
#     eng_fitness = quadgram_fitness(decrypted_data, English)
#     eng_similiarity = chi_squared(frequency_table(decrypted_data))
#     printable_percentage(decrypted_data)

LARGE_CORPUS = 75



MONO_POLY_MODEL = sio.load(os.path.join(data_dir(), "bin_svc_detect.skops"))
MONO_POLY_LABELS = ['Transposition/Monoalphabetic Subtitution', 'Polyalphabetic Substitution']

POLY_MODEL = sio.load(os.path.join(data_dir(), "poly_svc_detect.skops"))
POLY_LABELS = ["Vigenere", "XOR"]


def identify(ctxt:bytes):
    if len(ctxt) < LARGE_CORPUS:
        print(f"Small Ciphertext Size: {len(ctxt)}. Identification may not be accurate")

    freq_table = frequency_table(ctxt)
    non_zero_keys = {k:freq_table[k] for k in freq_table.keys() if freq_table[k] > 0}

    # Only Two Symbols Exist?
    # TODO does not take into account delimiter 
    # perhaps || with heurstic that looks for groupings of 5 and there are only 3 overll symbols (1 being delimiter and the other 2 being the actual symbols)
    if len(non_zero_keys.keys()) == 2:
        return "Baconian"

    if len(non_zero_keys) == 5 or len(non_zero_keys) == 6:
        return "Polybus"

    # playfair, foursquare, bifid etc..
    # if len(non_zero_keys) == 25 and len(ctxt) > LARGE_CORPUS:
    #     return "Square Cipher"

    chi_sq = inv_chi_squared(freq_table, English.byte_distrib, len(ctxt), [bytes(a,'utf8') for a  in ALPHABET])
    ioc = index_of_coincidence(ctxt)

    feats = np.array([chi_sq, ioc])
    feats = np.resize(feats, (1, 2))

    if has_non_printables(ctxt):
        return 'XOR'

    is_polyalphabetic = MONO_POLY_MODEL.predict(feats)[0] == 1
    if is_polyalphabetic:
        is_vigenere = POLY_MODEL.predit(feats)[0] == 0
        if is_vigenere:
            return "Vigenere"
        else:
            return "XOR"
    else:
        "Transposition/Monoalphabetic Subtitution"

ALPHABET = {'\n',
 ' ',
 '!',
 '"',
 '#',
 '$',
 '%',
 '&',
 "'",
 '(',
 ')',
 '*',
 '+',
 ',',
 '-',
 '.',
 '/',
 '0',
 '1',
 '2',
 '3',
 '4',
 '5',
 '6',
 '7',
 '8',
 '9',
 ':',
 ';',
 '=',
 '>',
 '?',
 '@',
 'A',
 'B',
 'C',
 'D',
 'E',
 'F',
 'G',
 'H',
 'I',
 'J',
 'K',
 'L',
 'M',
 'N',
 'O',
 'P',
 'Q',
 'R',
 'S',
 'T',
 'U',
 'V',
 'W',
 'X',
 'Y',
 'Z',
 '[',
 '\\',
 ']',
 '^',
 '_',
 '`',
 'a',
 'b',
 'c',
 'd',
 'e',
 'f',
 'g',
 'h',
 'i',
 'j',
 'k',
 'l',
 'm',
 'n',
 'o',
 'p',
 'q',
 'r',
 's',
 't',
 'u',
 'v',
 'w',
 'x',
 'y',
 'z',
 '{',
 '|',
 '}',
 '~',
 '¡',
 '¢',
 '£',
 '¤',
 '¥',
 '¦',
 '§',
 '¨',
 'ª',
 '¬',
 '®',
 '¯',
 '°',
 '±',
 '²',
 '³',
 '´',
 'µ',
 '¶',
 '·',
 '¹',
 'º',
 '»',
 '¼',
 '½',
 '¾',
 '¿',
 'À',
 'Á',
 'Â',
 'Ã',
 'Å',
 'Ç',
 'È',
 'É',
 'Í',
 'Î',
 'Ñ',
 'Ò',
 'Ó',
 'Ô',
 'Ö',
 '×',
 'Ø',
 'Ü',
 'Ý',
 'à',
 'á',
 'â',
 'ã',
 'ä',
 'å',
 'æ',
 'ç',
 'è',
 'é',
 'ê',
 'ë',
 'ì',
 'í',
 'î',
 'ï',
 'ñ',
 'ò',
 'ó',
 'ô',
 'õ',
 'ö',
 'ø',
 'ù',
 'ú',
 'û',
 'ü',
 'ý',
 'ÿ',
 'ā',
 'ć',
 'ē',
 'ī',
 'ł',
 'ň',
 'ō',
 'ő',
 'œ',
 'ř',
 'Š',
 'š',
 'ū',
 'Ÿ',
 'Ž',
 'ƒ',
 '˜',
 '́',
 'γ',
 'ο',
 'π',
 '٭',
 '‐',
 '‑',
 '–',
 '—',
 '―',
 '‘',
 '’',
 '‚',
 '“',
 '”',
 '„',
 '†',
 '‡',
 '•',
 '…',
 '‰',
 '′',
 '″',
 '‹',
 '⁄',
 '₂',
 '€',
 '™',
 '⅓',
 '⅔',
 '⅛',
 '⅜',
 '⇒',
 '−',
 '√',
 '■',
 '◆',
 '●',
 '★',
 '☆',
 '♠',
 '♣',
 '♥',
 '♦',
 '✭',
 '。',
 '一',
 '上',
 '下',
 '並',
 '中',
 '了',
 '人',
 '他',
 '來',
 '俄',
 '個',
 '克',
 '兩',
 '公',
 '兵',
 '剛',
 '勒',
 '務',
 '午',
 '受',
 '可',
 '司',
 '名',
 '告',
 '和',
 '員',
 '問',
 '回',
 '國',
 '報',
 '士',
 '夠',
 '子',
 '官',
 '家',
 '察',
 '尉',
 '尿',
 '岡',
 '州',
 '帕',
 '常',
 '平',
 '序',
 '度',
 '廷',
 '患',
 '應',
 '手',
 '拉',
 '接',
 '損',
 '斯',
 '方',
 '日',
 '星',
 '是',
 '期',
 '格',
 '機',
 '歌',
 '歲',
 '水',
 '活',
 '溝',
 '激',
 '特',
 '現',
 '用',
 '由',
 '男',
 '異',
 '病',
 '療',
 '發',
 '的',
 '知',
 '私',
 '程',
 '立',
 '糖',
 '級',
 '統',
 '翻',
 '者',
 '肖',
 '能',
 '英',
 '號',
 '血',
 '行',
 '西',
 '解',
 '言',
 '該',
 '語',
 '說',
 '調',
 '講',
 '警',
 '譯',
 '谷',
 '路',
 '車',
 '軍',
 '輛',
 '近',
 '通',
 '過',
 '邁',
 '醫',
 '附',
 '際',
 '雷',
 '題',
 '駕',
 '駛',
 '高',
 '黑',
 '點',
 'ﬁ',
 '，',
 '�'}